// This is your Prisma schema file,
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

// Prisma generator configuration to create the Prisma client
generator client {
  provider = "prisma-client-js"
}

// Data source configuration for connecting to a PostgreSQL database
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum for user roles, defining different types of users in the system
enum UserRole {
  CHEF
  ENTREPRENEUR
  RESTAURANT
  SUPPLIER
}

enum Status {
  CANCELED
  CONFIRMED
  PENDING
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PIX
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  userRole  UserRole
  score     Int       @default(0)

  // Optional fields depending on role
  cnpj      String?     // CHEF or RESTAURANT

  // Relations
  reviews     Review[]
  bookings    Booking[]
  kitchens    Kitchen[]      @relation("RestaurantKitchens")
  chefBookings ChefBooking[] @relation("ChefUserBookings")
  chefOfBookings Booking[]   @relation("ChefUserBookings")
  products     Product[]      @relation("SupplierProducts")
}

model Booking {
  id         Int      @id @default(autoincrement())
  userId     Int
  kitchenId  Int
  chefId     Int?
  date       DateTime
  startTime  DateTime
  endTime    DateTime
  status     Status

  user       User     @relation(fields: [userId], references: [id])
  kitchen    Kitchen  @relation(fields: [kitchenId], references: [id])
  chef       User?    @relation("ChefUserBookings", fields: [chefId], references: [id])
  payment    Payment?
  chefBookings ChefBooking[]
}

model ChefBooking {
  id        Int    @id @default(autoincrement())
  chefId    Int
  bookingId Int

  chef      User    @relation("ChefUserBookings", fields: [chefId], references: [id])
  booking   Booking @relation(fields: [bookingId], references: [id])

  @@unique([chefId, bookingId])
}

model Kitchen {
  id           Int       @id @default(autoincrement())
  name         String
  location     String
  capacity     Int
  equipment    String[]
  score        Int       @default(0)

  bookings     Booking[]
  reviews      Review[]
  restaurant   User?     @relation("RestaurantKitchens", fields: [restaurantId], references: [id])
  restaurantId Int?
}

model Payment {
  id             Int            @id @default(autoincrement())
  bookingId      Int  @unique
  value          Float
  status         Status
  paymentMethod  PaymentMethod

  booking        Booking        @relation(fields: [bookingId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String
  userId    Int
  kitchenId Int

  user      User     @relation(fields: [userId], references: [id])
  kitchen   Kitchen  @relation(fields: [kitchenId], references: [id])
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  price       Float
  supplierId  Int

  supplier    User    @relation("SupplierProducts", fields: [supplierId], references: [id])
}